generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String?
  profile       Profile?
  tweets        Tweet[]  @relation("own_tweets")
  liked_tweets  Tweet[]  @relation("liked_tweets")
  replies       Reply[]
  liked_replies Reply[]  @relation("liked_replies")
  replied       Reply[]  @relation("replied")
  followedBy    Follow[] @relation("following")
  following     Follow[] @relation("follower")
}

model Profile {
  birthday String?
  bio      String?
  location String?
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
}

model Tweet {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  content     String
  liked_users User[]    @relation("liked_tweets")
  author      User?     @relation("own_tweets", fields: [authorId], references: [id])
  authorId    String
  replies     Reply[]
}

model Reply {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  content       String
  liked_users   User[]   @relation("liked_replies")
  replied_users User[]   @relation("replied")
  author        User?    @relation(fields: [authorId], references: [id])
  authorId      String?
  tweet         Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId       String?
}

model Follow {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}
